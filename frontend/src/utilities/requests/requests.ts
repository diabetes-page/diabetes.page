/**
 * This file was autogenerated using the route definitions from the backend.
 */
import { AxiosResponse } from 'axios';
import { AppointmentResource as BackendAppointmentResource } from '../../../../backend/src/domains/appointments/resources/AppointmentResource';
import { Resource as BackendCreateAppointmentResource } from '../../../../backend/src/domains/appointments/routes/createAppointment/Resource';
import { Resource as BackendIndexAppointmentsForUserResource } from '../../../../backend/src/domains/appointments/routes/indexAppointmentsForUser/Resource';
import { Resource as BackendCheckAuthStatusResource } from '../../../../backend/src/domains/auth/routes/checkAuthStatus/Resource';
import { Resource as BackendLoginResource } from '../../../../backend/src/domains/auth/routes/login/Resource';
import { Resource as BackendRegisterResource } from '../../../../backend/src/domains/auth/routes/register/Resource';
import { ConferenceResource as BackendConferenceResource } from '../../../../backend/src/domains/conferences/resources/ConferenceResource';
import { Resource as BackendShowConferenceTokenResource } from '../../../../backend/src/domains/conferences/routes/showConferenceToken/Resource';
import { TeachingBaseDocumentResource as BackendTeachingBaseDocumentResource } from '../../../../backend/src/domains/teachingBases/resources/TeachingBaseDocumentResource';
import { TopicResource as BackendTopicResource } from '../../../../backend/src/domains/teachingBases/resources/TopicResource';
import { BasicTrainingResource as BackendBasicTrainingResource } from '../../../../backend/src/domains/trainings/resources/BasicTrainingResource';
import { FullTrainingResource as BackendFullTrainingResource } from '../../../../backend/src/domains/trainings/resources/FullTrainingResource';
import { BasicConsultantResource as BackendBasicConsultantResource } from '../../../../backend/src/domains/users/resources/BasicConsultantResource';
import { BasicUserResource as BackendBasicUserResource } from '../../../../backend/src/domains/users/resources/BasicUserResource';
import { SensitiveDataUserResource as BackendSensitiveDataUserResource } from '../../../../backend/src/domains/users/resources/SensitiveDataUserResource';
import { Resource as BackendIndexUsersResource } from '../../../../backend/src/domains/users/routes/indexUsers/Resource';
import { Get, Post, withAuth } from './axios';

export type AppointmentResource = BackendAppointmentResource;
export type CreateAppointmentResource = BackendCreateAppointmentResource;
export type IndexAppointmentsForUserResource = BackendIndexAppointmentsForUserResource;
export type CheckAuthStatusResource = BackendCheckAuthStatusResource;
export type LoginResource = BackendLoginResource;
export type LoginParameters = {
  email: string;
  password: string;
};
export type RegisterResource = BackendRegisterResource;
export type RegisterParameters = {
  email: string;
  password: string;
  name: string;
};
export type ConferenceResource = BackendConferenceResource;
export type ShowConferenceTokenResource = BackendShowConferenceTokenResource;
export type TeachingBaseDocumentResource = BackendTeachingBaseDocumentResource;
export type TopicResource = BackendTopicResource;
export type BasicTrainingResource = BackendBasicTrainingResource;
export type FullTrainingResource = BackendFullTrainingResource;
export type BasicConsultantResource = BackendBasicConsultantResource;
export type BasicUserResource = BackendBasicUserResource;
export type SensitiveDataUserResource = BackendSensitiveDataUserResource;
export type IndexUsersResource = BackendIndexUsersResource;

export const requests = {
  createAppointment: async (): Promise<
    AxiosResponse<CreateAppointmentResource>
  > => Post(`/appointments`, await withAuth()),

  indexAppointmentsForUser: async (
    userId: number,
  ): Promise<AxiosResponse<IndexAppointmentsForUserResource>> =>
    Get(`/users/${userId}/appointments`, await withAuth()),

  showAppointment: async (
    id: number,
  ): Promise<AxiosResponse<AppointmentResource>> =>
    Get(`/appointments/${id}`, await withAuth()),

  checkAuthStatus: async (): Promise<AxiosResponse<CheckAuthStatusResource>> =>
    Get(`/auth/status`, await withAuth()),

  login: async (data: LoginParameters): Promise<AxiosResponse<LoginResource>> =>
    Post(`/auth/login`, data, await withAuth()),

  register: async (
    data: RegisterParameters,
  ): Promise<AxiosResponse<RegisterResource>> =>
    Post(`/auth/register`, data, await withAuth()),

  showConferenceToken: async (
    appointmentId: number,
  ): Promise<AxiosResponse<ShowConferenceTokenResource>> =>
    Get(`/appointments/${appointmentId}/conference/token`, await withAuth()),

  showTraining: async (
    appointmentId: number,
  ): Promise<AxiosResponse<FullTrainingResource>> =>
    Get(`/appointments/${appointmentId}/training`, await withAuth()),

  indexUsers: async (): Promise<AxiosResponse<IndexUsersResource>> =>
    Get(`/users`, await withAuth()),

  showUser: async (
    id: number,
  ): Promise<AxiosResponse<SensitiveDataUserResource>> =>
    Get(`/users/${id}`, await withAuth()),
};
